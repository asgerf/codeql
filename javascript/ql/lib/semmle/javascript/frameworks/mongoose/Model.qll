private import javascript

private class Sinks extends ModelInput::SinkModelCsv {
  override predicate row(string row) {
    row =
      [
        "mongoose;CollectionBase;Member[findAndModify].Argument[0];nosql-injection", //
        "mongoose;Model;Member[find,findOne,findOneAndDelete,findOneAndRemove,findOneAndReplace,findOneAndUpdate].Argument[0];nosql-injection", //
        "mongoose;Query;Member[find,findOne,findOneAndDelete,findOneAndRemove,findOneAndUpdate].Argument[0];nosql-injection", //
        "mongoose;RootQuerySelector;Member[$and,$nor,$or];nosql-injection", //
      ]
  }
}

private class Types extends ModelInput::TypeModelCsv {
  override predicate row(string row) {
    row =
      [
        "mongoose;AcceptsDiscriminator;mongoose;Model;", //
        "mongoose;AcceptsDiscriminator;mongoose;Schema.Types.Array;", //
        "mongoose;AcceptsDiscriminator;mongoose;Schema.Types.DocumentArray;", //
        "mongoose;AcceptsDiscriminator;mongoose;Schema.Types.Subdocument;", //
        "mongoose;Aggregate;mongoose;AggregateStatic;ReturnValue", //
        "mongoose;Aggregate;mongoose;Model;Member[aggregate].ReturnValue", //
        "mongoose;Collection;mongoose;Collection;ReturnValue", //
        "mongoose;Collection;mongoose;Connection;Member[collection].ReturnValue", //
        "mongoose;Collection;mongoose;Document;Member[collection]", //
        "mongoose;Collection;mongoose;Model;Member[collection]", //
        "mongoose;CollectionBase;mongoose;Collection;", //
        "mongoose;CompileModelOptions;mongoose;;Member[model].Argument[3]", //
        "mongoose;CompileModelOptions;mongoose;Connection;Member[model].Argument[3]", //
        "mongoose;Connection;mongoose;Collection;Argument[1]", //
        "mongoose;Connection;mongoose;CollectionBase;Member[conn]", //
        "mongoose;Connection;mongoose;CompileModelOptions;Member[connection]", //
        "mongoose;Connection;mongoose;Connection;Member[openUri,plugin,useDb].ReturnValue", //
        "mongoose;Connection;mongoose;Connection;Member[openUri].Argument[1,2].Argument[1]", //
        "mongoose;Connection;mongoose;Connection;Member[openUri].ReturnValue.Awaited", //
        "mongoose;Connection;mongoose;ConnectionStatic;ReturnValue", //
        "mongoose;Connection;mongoose;Document;Member[db]", //
        "mongoose;Connection;mongoose;Model;Member[db]", //
        "mongoose;Document;mongoose;Document;Member[$getAllSubdocs,$getPopulatedDocs].ReturnValue.ArrayElement", //
        "mongoose;Document;mongoose;Document;Member[$parent].ReturnValue", //
        "mongoose;Document;mongoose;Document;Member[equals].Argument[0]", //
        "mongoose;Document;mongoose;DocumentStatic;ReturnValue", //
        "mongoose;Document;mongoose;Error.VersionErrorStatic;Argument[0]", //
        "mongoose;Document;mongoose;Model;Member[bulkSave].Argument[0].ArrayElement", //
        "mongoose;Document;mongoose;SchemaType;Member[cast].Argument[1]", //
        "mongoose;Document;mongoose;Types.Subdocument;", //
        "mongoose;Document;mongoose;Types.Subdocument;Member[$parent,ownerDocument,parent].ReturnValue", //
        "mongoose;Document;mongoose;VirtualType;Member[applyGetters,applySetters].Argument[1]", //
        "mongoose;FilterQuery;mongoose;Model;Member[count,countDocuments,deleteMany,deleteOne,exists,find,findOne,findOneAndDelete,findOneAndRemove,findOneAndReplace,findOneAndUpdate,geoSearch,replaceOne,update,updateMany,updateOne].Argument[0]", //
        "mongoose;FilterQuery;mongoose;Model;Member[distinct].Argument[1]", //
        "mongoose;FilterQuery;mongoose;Query;Member[and,nor,or].Argument[0].ArrayElement", //
        "mongoose;FilterQuery;mongoose;Query;Member[count,countDocuments,deleteMany,deleteOne,find,findOne,findOneAndDelete,findOneAndRemove,findOneAndUpdate,merge,remove,replaceOne,setQuery,update,updateMany,updateOne].Argument[0]", //
        "mongoose;FilterQuery;mongoose;Query;Member[distinct].Argument[1]", //
        "mongoose;FilterQuery;mongoose;Query;Member[getFilter,getQuery].ReturnValue", //
        "mongoose;FilterQuery;mongoose;RootQuerySelector;Member[$and,$nor,$or].ArrayElement", //
        "mongoose;FilterQuery;mongoose;VirtualTypeOptions;Member[match]", //
        "mongoose;InsertManyOptions;mongoose;Model;Member[insertMany].Argument[1]", //
        "mongoose;MixedSchemaTypeOptions;mongoose;SchemaDefinitionProperty;", //
        "mongoose;Model;mongoose;;Member[model].ReturnValue", //
        "mongoose;Model;mongoose;AcceptsDiscriminator;Member[discriminator].ReturnValue", //
        "mongoose;Model;mongoose;Aggregate;Member[model].Argument[0]", //
        "mongoose;Model;mongoose;Connection;Member[model].ReturnValue", //
        "mongoose;Model;mongoose;Document;Member[populate].Argument[2]", //
        "mongoose;Model;mongoose;PopulateOptions;Member[model]", //
        "mongoose;Model;mongoose;Query;Member[cast].Argument[0]", //
        "mongoose;Model;mongoose;Query;Member[populate].Argument[2]", //
        "mongoose;Model;mongoose;Schema.Types.Array;Member[discriminator].ReturnValue", //
        "mongoose;Model;mongoose;Schema.Types.DocumentArray;Member[discriminator].ReturnValue", //
        "mongoose;Model;mongoose;Schema.Types.Subdocument;Member[discriminator].ReturnValue", //
        "mongoose;Model;mongoose;SchemaType;Member[ref].Argument[0]", //
        "mongoose;Model;mongoose;SchemaTypeOptions;Member[ref]", //
        "mongoose;Model;mongoose;SchemaTypeOptions;Member[ref].ReturnValue", //
        "mongoose;MongooseQueryOptions;mongoose;Query;Member[_mongooseOptions]", //
        "mongoose;MongooseQueryOptions;mongoose;Query;Member[mongooseOptions].Argument[0]", //
        "mongoose;MongooseQueryOptions;mongoose;Query;Member[mongooseOptions].ReturnValue", //
        "mongoose;ObjectId;mongoose;AcceptsDiscriminator;Member[discriminator].Argument[2]", //
        "mongoose;PopulateOption;mongoose;InsertManyOptions;", //
        "mongoose;PopulateOption;mongoose;QueryOptions;", //
        "mongoose;PopulateOptions;mongoose;Document;Member[populate].Argument[0,4]", //
        "mongoose;PopulateOptions;mongoose;Document;Member[populate].Argument[0].ArrayElement", //
        "mongoose;PopulateOptions;mongoose;Model;Member[populate].Argument[1]", //
        "mongoose;PopulateOptions;mongoose;Model;Member[populate].Argument[1].ArrayElement", //
        "mongoose;PopulateOptions;mongoose;PopulateOption;Member[populate]", //
        "mongoose;PopulateOptions;mongoose;PopulateOption;Member[populate].ArrayElement", //
        "mongoose;PopulateOptions;mongoose;PopulateOptions;Member[populate]", //
        "mongoose;PopulateOptions;mongoose;PopulateOptions;Member[populate].ArrayElement", //
        "mongoose;PopulateOptions;mongoose;Query;Member[populate].Argument[0]", //
        "mongoose;PopulateOptions;mongoose;Query;Member[populate].Argument[0].ArrayElement", //
        "mongoose;Query;mongoose;Document;Member[replaceOne,update,updateOne].ReturnValue", //
        "mongoose;Query;mongoose;Query;Member[merge].Argument[0]", //
        "mongoose;Query;mongoose;Query;Member[remove].ReturnValue", //
        "mongoose;Query;mongoose;QueryStatic;ReturnValue", //
        "mongoose;Query;mongoose;QueryWithHelpers;", //
        "mongoose;QueryOptions;mongoose;Document;Member[delete,deleteOne,remove].Argument[0]", //
        "mongoose;QueryOptions;mongoose;Document;Member[replaceOne,update,updateOne].Argument[1]", //
        "mongoose;QueryOptions;mongoose;Model;Member[countDocuments,deleteMany,deleteOne,findByIdAndDelete,findByIdAndRemove,findOneAndDelete,findOneAndRemove].Argument[1]", //
        "mongoose;QueryOptions;mongoose;Model;Member[estimatedDocumentCount].Argument[0]", //
        "mongoose;QueryOptions;mongoose;Model;Member[find,findById,findByIdAndUpdate,findOne,findOneAndReplace,findOneAndUpdate,replaceOne,update,updateMany,updateOne].Argument[2]", //
        "mongoose;QueryOptions;mongoose;PopulateOptions;Member[options]", //
        "mongoose;QueryOptions;mongoose;Query;Member[countDocuments,deleteMany,deleteOne,findByIdAndDelete,findOneAndDelete,findOneAndRemove].Argument[1]", //
        "mongoose;QueryOptions;mongoose;Query;Member[cursor,estimatedDocumentCount,setOptions].Argument[0]", //
        "mongoose;QueryOptions;mongoose;Query;Member[cursor].ReturnValue.Member[options]", //
        "mongoose;QueryOptions;mongoose;Query;Member[find,findByIdAndUpdate,findOne,findOneAndUpdate,replaceOne,update,updateMany,updateOne].Argument[2]", //
        "mongoose;QueryOptions;mongoose;Query;Member[getOptions].ReturnValue", //
        "mongoose;QueryOptions;mongoose;VirtualTypeOptions;Member[options]", //
        "mongoose;QueryWithHelpers;mongoose;Document;Member[delete,deleteOne].ReturnValue", //
        "mongoose;QueryWithHelpers;mongoose;Model;Member[$where,count,countDocuments,deleteMany,deleteOne,distinct,estimatedDocumentCount,exists,find,findById,findByIdAndDelete,findByIdAndRemove,findByIdAndUpdate,findOne,findOneAndDelete,findOneAndRemove,findOneAndReplace,findOneAndUpdate,geoSearch,remove,replaceOne,update,updateMany,updateOne,where].ReturnValue", //
        "mongoose;QueryWithHelpers;mongoose;Query;Member[$where,count,countDocuments,deleteMany,deleteOne,distinct,estimatedDocumentCount,find,findByIdAndDelete,findByIdAndUpdate,findOne,findOneAndDelete,findOneAndRemove,findOneAndUpdate,lean,orFail,populate,replaceOne,transform,update,updateMany,updateOne].ReturnValue", //
        "mongoose;QueryWithHelpers;mongoose;Query;Member[toConstructor].ReturnValue.ReturnValue", //
        "mongoose;RootQuerySelector;mongoose;_FilterQuery;", //
        "mongoose;Schema.Types.Array;mongoose;Schema.Types.ArrayStatic;ReturnValue", //
        "mongoose;Schema.Types.Boolean;mongoose;Schema.Types.BooleanStatic;ReturnValue", //
        "mongoose;Schema.Types.BooleanStatic;mongoose;BooleanSchemaDefinition;", //
        "mongoose;Schema.Types.Buffer;mongoose;Schema.Types.BufferStatic;ReturnValue", //
        "mongoose;Schema.Types.BufferStatic;mongoose;RefType;", //
        "mongoose;Schema.Types.Date;mongoose;Date;", //
        "mongoose;Schema.Types.Date;mongoose;Schema.Types.DateStatic;ReturnValue", //
        "mongoose;Schema.Types.DateStatic;mongoose;DateSchemaDefinition;", //
        "mongoose;Schema.Types.Decimal128;mongoose;Decimal128;", //
        "mongoose;Schema.Types.Decimal128;mongoose;Schema.Types.Decimal128Static;ReturnValue", //
        "mongoose;Schema.Types.DocumentArray;mongoose;Schema.Types.DocumentArrayStatic;ReturnValue", //
        "mongoose;Schema.Types.Map;mongoose;Schema.Types.MapStatic;ReturnValue", //
        "mongoose;Schema.Types.Mixed;mongoose;Mixed;", //
        "mongoose;Schema.Types.Mixed;mongoose;Schema.Types.MixedStatic;ReturnValue", //
        "mongoose;Schema.Types.MixedStatic;mongoose;MixedSchemaTypeOptions;Member[type]", //
        "mongoose;Schema.Types.MixedStatic;mongoose;SchemaDefinitionProperty;", //
        "mongoose;Schema.Types.Number;mongoose;Number;", //
        "mongoose;Schema.Types.Number;mongoose;Schema.Types.NumberStatic;ReturnValue", //
        "mongoose;Schema.Types.NumberStatic;mongoose;NumberSchemaDefinition;", //
        "mongoose;Schema.Types.NumberStatic;mongoose;RefType;", //
        "mongoose;Schema.Types.ObjectId;mongoose;ObjectId;", //
        "mongoose;Schema.Types.ObjectId;mongoose;Schema.Types.ObjectIdStatic;ReturnValue", //
        "mongoose;Schema.Types.ObjectIdStatic;mongoose;ObjectIdSchemaDefinition;", //
        "mongoose;Schema.Types.ObjectIdStatic;mongoose;RefType;", //
        "mongoose;Schema.Types.String;mongoose;Schema.Types.StringStatic;ReturnValue", //
        "mongoose;Schema.Types.StringStatic;mongoose;RefType;", //
        "mongoose;Schema.Types.StringStatic;mongoose;StringSchemaDefinition;", //
        "mongoose;Schema.Types.Subdocument;mongoose;Schema.Types.SubdocumentStatic;ReturnValue", //
        "mongoose;Schema.Types.SubdocumentStatic;mongoose;Schema.Types.DocumentArray;Member[caster]", //
        "mongoose;Schema;mongoose;;Member[model].Argument[1]", //
        "mongoose;Schema;mongoose;;Member[plugin].Argument[0].Argument[0]", //
        "mongoose;Schema;mongoose;AcceptsDiscriminator;Member[discriminator].Argument[1]", //
        "mongoose;Schema;mongoose;Connection;Member[model].Argument[1]", //
        "mongoose;Schema;mongoose;Document;Member[schema]", //
        "mongoose;Schema;mongoose;Model;Member[schema]", //
        "mongoose;Schema;mongoose;Schema.Types.Array;Member[discriminator].Argument[1]", //
        "mongoose;Schema;mongoose;Schema.Types.DocumentArray;Member[discriminator].Argument[1]", //
        "mongoose;Schema;mongoose;Schema.Types.DocumentArray;Member[schema]", //
        "mongoose;Schema;mongoose;Schema.Types.Subdocument;Member[discriminator].Argument[1]", //
        "mongoose;Schema;mongoose;Schema.Types.Subdocument;Member[schema]", //
        "mongoose;Schema;mongoose;Schema;Member[add].Argument[0]", //
        "mongoose;Schema;mongoose;Schema;Member[childSchemas].ArrayElement.Member[schema]", //
        "mongoose;Schema;mongoose;Schema;Member[plugin].Argument[0].Argument[0]", //
        "mongoose;Schema;mongoose;SchemaDefinitionProperty;", //
        "mongoose;Schema;mongoose;SchemaDefinitionProperty;ArrayElement", //
        "mongoose;Schema;mongoose;SchemaStatic;ReturnValue", //
        "mongoose;Schema;mongoose;SchemaType;Member[schema]", //
        "mongoose;SchemaDefinitionProperty;mongoose;SchemaTypeOptions;Member[of]", //
        "mongoose;SchemaStatic;mongoose;;Member[Schema]", //
        "mongoose;SchemaType;mongoose;Error.CastErrorStatic;Argument[4]", //
        "mongoose;SchemaType;mongoose;Error.SyncIndexesErrorStatic;Argument[4]", //
        "mongoose;SchemaType;mongoose;Schema.Types.Array;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Array;Member[caster]", //
        "mongoose;SchemaType;mongoose;Schema.Types.Boolean;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Buffer;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Date;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Decimal128;", //
        "mongoose;SchemaType;mongoose;Schema.Types.DocumentArray;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Map;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Mixed;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Number;", //
        "mongoose;SchemaType;mongoose;Schema.Types.ObjectId;", //
        "mongoose;SchemaType;mongoose;Schema.Types.String;", //
        "mongoose;SchemaType;mongoose;Schema.Types.Subdocument;", //
        "mongoose;SchemaType;mongoose;Schema;Member[eachPath].Argument[0].Argument[1]", //
        "mongoose;SchemaType;mongoose;SchemaTypeStatic;ReturnValue", //
        "mongoose;SchemaTypeOptions;mongoose;MixedSchemaTypeOptions;", //
        "mongoose;SchemaTypeOptions;mongoose;SchemaDefinitionProperty;", //
        "mongoose;SchemaTypeOptions;mongoose;SchemaDefinitionProperty;ArrayElement", //
        "mongoose;SchemaTypeOptions;mongoose;SchemaType;Member[OptionsConstructor]", //
        "mongoose;SchemaTypeOptions;mongoose;SchemaTypeOptionsStatic;ReturnValue", //
        "mongoose;SchemaTypeStatic;mongoose;SchemaDefinitionProperty;", //
        "mongoose;Types.ArraySubdocument;mongoose;Types.ArraySubdocumentStatic;ReturnValue", //
        "mongoose;Types.Subdocument;mongoose;Types.ArraySubdocument;", //
        "mongoose;Types.Subdocument;mongoose;Types.SubdocumentStatic;ReturnValue", //
        "mongoose;VirtualType;mongoose;Schema;Member[virtual,virtualpath].ReturnValue", //
        "mongoose;VirtualType;mongoose;VirtualType;Member[get,set].Argument[0].Argument[1]", //
        "mongoose;VirtualType;mongoose;VirtualTypeStatic;ReturnValue", //
        "mongoose;VirtualTypeOptions;mongoose;Schema;Member[virtual].Argument[1]", //
        "mongoose;VirtualTypeStatic;mongoose;;Member[VirtualType]", //
        "mongoose;_FilterQuery;mongoose;FilterQuery;", //
      ]
  }
}
